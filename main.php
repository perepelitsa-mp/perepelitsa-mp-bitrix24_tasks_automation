<?php
// –û—Ç–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
define("NO_KEEP_STATISTIC", "Y");
define("NO_AGENT_STATISTIC","Y");
//define("NOT_CHECK_PERMISSIONS", true);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —è–¥—Ä–æ –ë–∏—Ç—Ä–∏–∫—Å
require($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_before.php");

use Bitrix\Main\Loader;
use Bitrix\Tasks\Internals\Task\Template\DependenceTable; // ORM-–∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞—á
use CTaskTemplates;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞—á
Loader::includeModule('tasks');

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/
$rootId  = ADAPTATION_ROOT_TEMPLATE_ID;  // ID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∑–∞–¥–∞—á–∏
$userId  = (int)str_replace('user_', '', '{{–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å}}');  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏
$starter = SYSTEM_USER_ID;  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/
global $USER;
if (!$USER || !$USER->IsAuthorized() || (int)$USER->GetID() !== $starter) {
    $USER = new CUser;
    $USER->Authorize($starter);         
}

/* 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —à–∞–±–ª–æ–Ω—ã —á–µ—Ä–µ–∑ ORM */
$ids   = [$rootId];
$rows  = DependenceTable::getList([
            'select' => ['TEMPLATE_ID'],
            'filter' => ['PARENT_TEMPLATE_ID' => $rootId]
         ])->fetchAll();
foreach ($rows as $row)
    $ids[] = (int)$row['TEMPLATE_ID'];
$ids = array_values(array_unique($ids));
$ids = array_filter($ids, fn($id) => (int)$id !== (int)$rootId);

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param int $userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param int $num –£—Ä–æ–≤–µ–Ω—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (1 - –ø—Ä—è–º–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
 * @return int ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
 */
function getBoss($userId, $num=1){
$userId = intval($userId);
if ($userId > 0) {
    CModule::IncludeModule("intranet");
    $dbUser = CUser::GetList(($by="id"), ($order="asc"), array("ID_EQUAL_EXACT"=>$userId), array("SELECT" => array("UF_*")));
    $arUser = $dbUser->GetNext();
    if ($arUser["UF_FIRST_LEVEL_AGREEMENT"] != null) {
        return $arUser["UF_FIRST_LEVEL_AGREEMENT"];
}

$i = 0;
while ($i < $num) { $i++; $arManagers=CIntranetUtils::GetDepartmentManager($arUser["UF_DEPARTMENT"], $arUser["ID"], true); foreach ($arManagers as $key=> $value)
    {
        $arUser = $value;
        break;
    }
    }
    return $arUser["ID"];
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫
 * @param int $userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @return int ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
 */
function getBossIgnoreTrips($userId){
        $boss = \App\User::getBoss($userId);
        $absenceType = \App\User::absenceType($boss['ID']);
        if (\CIntranetUtils::IsUserAbsent($boss['ID']) && $absenceType!==2){ 
            $boss = \App\User::getBoss($boss['ID']);
        }
        return $boss['ID'];
    }

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ
 * @param int $userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @return int ID –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ
 */
function getSecondUserAgreement($userId){
    $getbossId = \App\User::getBoss($userId);
	$firstCheckBossId = getBossIgnoreTrips($getbossId['ID']);
	$activeBossId = $firstCheckBossId;
	$raise_exit = 0;
	while($raise_exit<100){ 
			if (!\CIntranetUtils::IsUserAbsent($activeBossId) || \App\User::absenceType($activeBossId) == 2){break;}
			$raise_exit++;
            $activeBossId = getBossIgnoreTrips($activeBossId);
			if ($activeBossId != $firstCheckBossId){$firstCheckBossId = $activeBossId; continue; }
			if($activeBossId == $firstCheckBossId || $raise_exit>100){break;}
	}
	return $activeBossId;
    }

// –ü–æ–ª—É—á–∞–µ–º ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
$idBoss = getBoss($userId);

// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
$taskResult = CTaskItem::addByTemplate(
    $rootId,
    $starter,
    [
        'RESPONSIBLE_ID' => $userId,  // –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        'CREATED_BY'     => $starter  // –°–æ–∑–¥–∞—Ç–µ–ª—å
    ]
);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
if (is_array($taskResult)) {
    $taskItem = reset($taskResult);
} else {
    $taskItem = $taskResult;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
$taskItem->update(['AUDITORS' => [$idBoss]]);
$taskData = $taskItem->getData();

// –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–¥–∞—á
$baseUrl = SITE_URL . "/company/personal/user/{$userId}/tasks/task/view/";
$taskLinks = [];

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
$taskLinks[] = "üîπ <a href=\"{$baseUrl}{$taskData['ID']}\">–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ #{$taskData['ID']}</a>";

// –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
foreach ($ids as $childTemplateId) {
    $childResult = CTaskItem::addByTemplate(
        $childTemplateId,
        $starter,
        [
            'RESPONSIBLE_ID' => $userId,
            'PARENT_ID'      => $taskData['ID'],  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
            'CREATED_BY'     => $starter,
        ]
    );
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á
    if (is_array($childResult)) {
        foreach ($childResult as $childTask) {
            $childTask->update(['AUDITORS' => [$idBoss]]);
        }
    } elseif ($childResult instanceof CTaskItem) {
        $childResult->update(['AUDITORS' => [$idBoss]]);
    }
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
$message = "üìù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é! –¢–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ <a href=\"{$baseUrl}{$taskData['ID']}\">–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è ‚Ññ{$taskData['ID']}</a>";

\CIMNotify::Add([
    "TO_USER_ID" => $userId,
    "FROM_USER_ID" => $starter, 
    "NOTIFY_TYPE" => IM_NOTIFY_FROM,
    "NOTIFY_MODULE" => "tasks",
    "NOTIFY_MESSAGE" => $message,
    "NOTIFY_MESSAGE_OUT" => strip_tags($message)
]);
